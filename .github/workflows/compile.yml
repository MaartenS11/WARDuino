name: Build
on: [push, pull_request]

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true  # Cancel in-flight jobs for the same branch or PR

env:
  PROTOBUF_VERSION: v21.4
  PROTOBUF_BUILD_FOLDER: ${{ github.workspace }}/protobuf

jobs:
    formatting-check:
        name: Formatting Check
        if: github.event.pull_request.draft == false
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Run clang-format style check for C/C++ programs.
              uses: jidicula/clang-format-action@v3.5.1
              with:
                clang-format-version: '11'
                check-path: 'src'
                fallback-style: 'Google'

    compile-cli:
        name: Compile on ${{matrix.os}}
        needs: [formatting-check]
        runs-on: ${{matrix.os}}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-18.04, ubuntu-20.04, macos-latest]
        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                  submodules: 'recursive'

            - name: Cache protobuf
              id: cache-protobuf
              uses: actions/cache@v3
              if: matrix.os != 'macos-latest'
              with:
                path: ${{ env.PROTOBUF_BUILD_FOLDER }}
                key: ${{ matrix.os }}-protobuf${{ env.PROTOBUF_VERSION }}

            - name: Build protobuf
              if: steps.cache-protobuf.outputs.cache-hit != 'true' && matrix.os != 'macos-latest'
              run: |
                mkdir -p ${{ env.PROTOBUF_BUILD_FOLDER }}
                cd ${{ env.PROTOBUF_BUILD_FOLDER }}
                git clone https://github.com/protocolbuffers/protobuf.git .
                git checkout ${{ env.PROTOBUF_VERSION }}
                git submodule update --init --recursive
                ./autogen.sh
                ./configure
                make -j$(nproc) # $(nproc) ensures it uses all cores for compilation
                make check

            - name: Setup protobuf
              if: matrix.os != 'macos-latest'
              run: |
                sudo make install
                sudo ldconfig # refresh shared library cache.
              working-directory: ${{ env.PROTOBUF_BUILD_FOLDER }}

            - name: Setup protobuf (brew)
              if: matrix.os == 'macos-latest'
              run: brew install protobuf

            - name: Create build folder
              run: mkdir build-emu

            - name: Build WARDuino CLI
              run: cmake .. -D BUILD_EMULATOR=ON ; cmake --build .
              working-directory: build-emu

    compile-with-arduino:
        name: (Arduino) Compile on ${{matrix.board.platform-name}}
        needs: [formatting-check]
        runs-on: ubuntu-latest
        env:
            SKETCHES_REPORTS_PATH: sketches-reports
            SKETCHES_REPORTS_ARTIFACT_NAME: sketches-reports
            LIBRARIES: |
                - source-path: ./
                - name: WiFi
                - name: HTTPClient
                - name: PubSubClient
                - name: Adafruit NeoPixel
                - source-url: https://github.com/me-no-dev/AsyncTCP.git
        strategy:
            fail-fast: false
            matrix:
                board:
                    - fqbn: 'esp32:esp32:esp32'
                      platform-name: esp32:esp32
                include:
                    - board:
                        platform-name: esp32:esp32
                      platforms: |
                        # Install ESP32 platform via Boards Manager
                        - name: esp32:esp32
                          source-url: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
                      sketches: |
                        - platforms/Arduino
        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                  submodules: 'recursive'

            - name: Setup protoc
              uses: arduino/setup-protoc@v1
              with:
                version: '3.x'

            - name: Compile sketches
              uses: arduino/compile-sketches@v1
              with:
                  platforms: ${{ matrix.platforms }}
                  fqbn: ${{ matrix.board.fqbn }}
                  sketch-paths: |
                      ${{ matrix.sketches }}
                  libraries: |
                      ${{ env.LIBRARIES }}
                  enable-deltas-report: true
                  sketches-report-path: ${{ env.SKETCHES_REPORTS_PATH }}

            - name: Upload sketches report to workflow artifact
              uses: actions/upload-artifact@v2
              with:
                  name: ${{ env.SKETCHES_REPORTS_ARTIFACT_NAME }}
                  path: ${{ env.SKETCHES_REPORTS_PATH }}

    compile-with-idf:
        name: (ESP-IDF) Compile on ${{matrix.board.platform-name}}
        needs: [formatting-check]
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                board:
                    - fqbn: 'esp32:esp32:esp32'
                      platform-name: esp32:esp32
        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                  submodules: 'recursive'

            - name: Build WARDuino for ESP-IDF
              uses: espressif/esp-idf-ci-action@v1
              with:
                  esp_idf_version: v4.4.1
                  target: esp32
                  command: idf.py build -DBUILD_ESP=ON
                  path: .

