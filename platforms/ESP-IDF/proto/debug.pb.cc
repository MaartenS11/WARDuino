// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug.proto

#include "debug.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace debug {
PROTOBUF_CONSTEXPR DebugMessage::DebugMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.payload_)*/nullptr
  , /*decltype(_impl_.command_)*/0} {}
struct DebugMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugMessageDefaultTypeInternal() {}
  union {
    DebugMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugMessageDefaultTypeInternal _DebugMessage_default_instance_;
PROTOBUF_CONSTEXPR Notification::Notification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.payload_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct NotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationDefaultTypeInternal() {}
  union {
    Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationDefaultTypeInternal _Notification_default_instance_;
PROTOBUF_CONSTEXPR Payload::Payload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PayloadDefaultTypeInternal() {}
  union {
    Payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PayloadDefaultTypeInternal _Payload_default_instance_;
PROTOBUF_CONSTEXPR Snapshot::Snapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.breakpoints_)*/{}
  , /*decltype(_impl_.functions_)*/{}
  , /*decltype(_impl_.callstack_)*/{}
  , /*decltype(_impl_.locals_)*/nullptr
  , /*decltype(_impl_.queue_)*/nullptr
  , /*decltype(_impl_.callbacks_)*/nullptr
  , /*decltype(_impl_.program_counter_)*/0u
  , /*decltype(_impl_.state_)*/0} {}
struct SnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotDefaultTypeInternal() {}
  union {
    Snapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotDefaultTypeInternal _Snapshot_default_instance_;
PROTOBUF_CONSTEXPR Function::Function(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instructions_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_.locals_)*/nullptr
  , /*decltype(_impl_.fidx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionDefaultTypeInternal() {}
  union {
    Function _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionDefaultTypeInternal _Function_default_instance_;
PROTOBUF_CONSTEXPR RFC::RFC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.args_)*/{}
  , /*decltype(_impl_.fidx_)*/0
  , /*decltype(_impl_.argcount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RFCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RFCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RFCDefaultTypeInternal() {}
  union {
    RFC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RFCDefaultTypeInternal _RFC_default_instance_;
PROTOBUF_CONSTEXPR CallstackEntry::CallstackEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.fidx_)*/0
  , /*decltype(_impl_.sp_)*/0
  , /*decltype(_impl_.fp_)*/0
  , /*decltype(_impl_.start_)*/0
  , /*decltype(_impl_.ra_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallstackEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallstackEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallstackEntryDefaultTypeInternal() {}
  union {
    CallstackEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallstackEntryDefaultTypeInternal _CallstackEntry_default_instance_;
PROTOBUF_CONSTEXPR Locals::Locals(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocalsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalsDefaultTypeInternal() {}
  union {
    Locals _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalsDefaultTypeInternal _Locals_default_instance_;
PROTOBUF_CONSTEXPR Value::Value(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueDefaultTypeInternal() {}
  union {
    Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueDefaultTypeInternal _Value_default_instance_;
PROTOBUF_CONSTEXPR CallbackMapping::CallbackMapping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallbackMappingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackMappingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackMappingDefaultTypeInternal() {}
  union {
    CallbackMapping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackMappingDefaultTypeInternal _CallbackMapping_default_instance_;
PROTOBUF_CONSTEXPR CallbackEntry::CallbackEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tidx_)*/{}
  , /*decltype(_impl_._tidx_cached_byte_size_)*/{0}
  , /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallbackEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackEntryDefaultTypeInternal() {}
  union {
    CallbackEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackEntryDefaultTypeInternal _CallbackEntry_default_instance_;
PROTOBUF_CONSTEXPR EventsQueue::EventsQueue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_.count_)*/0} {}
struct EventsQueueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventsQueueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventsQueueDefaultTypeInternal() {}
  union {
    EventsQueue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventsQueueDefaultTypeInternal _EventsQueue_default_instance_;
PROTOBUF_CONSTEXPR Event::Event(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
PROTOBUF_CONSTEXPR Range::Range(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_)*/0
  , /*decltype(_impl_.end_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeDefaultTypeInternal() {}
  union {
    Range _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeDefaultTypeInternal _Range_default_instance_;
}  // namespace debug
namespace debug {
bool Notification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Notification_Type_strings[14] = {};

static const char Notification_Type_names[] =
  "changeaffected"
  "continued"
  "dump"
  "dumpcallbacks"
  "dumpevents"
  "dumplocals"
  "halted"
  "hitbreakpoint"
  "malformed"
  "newevent"
  "paused"
  "snapshot"
  "stepped"
  "unknown";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Notification_Type_entries[] = {
  { {Notification_Type_names + 0, 14}, 11 },
  { {Notification_Type_names + 14, 9}, 0 },
  { {Notification_Type_names + 23, 4}, 6 },
  { {Notification_Type_names + 27, 13}, 10 },
  { {Notification_Type_names + 40, 10}, 9 },
  { {Notification_Type_names + 50, 10}, 7 },
  { {Notification_Type_names + 60, 6}, 1 },
  { {Notification_Type_names + 66, 13}, 4 },
  { {Notification_Type_names + 79, 9}, 12 },
  { {Notification_Type_names + 88, 8}, 5 },
  { {Notification_Type_names + 96, 6}, 2 },
  { {Notification_Type_names + 102, 8}, 8 },
  { {Notification_Type_names + 110, 7}, 3 },
  { {Notification_Type_names + 117, 7}, 13 },
};

static const int Notification_Type_entries_by_number[] = {
  1, // 0 -> continued
  6, // 1 -> halted
  10, // 2 -> paused
  12, // 3 -> stepped
  7, // 4 -> hitbreakpoint
  9, // 5 -> newevent
  2, // 6 -> dump
  5, // 7 -> dumplocals
  11, // 8 -> snapshot
  4, // 9 -> dumpevents
  3, // 10 -> dumpcallbacks
  0, // 11 -> changeaffected
  8, // 12 -> malformed
  13, // 13 -> unknown
};

const std::string& Notification_Type_Name(
    Notification_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Notification_Type_entries,
          Notification_Type_entries_by_number,
          14, Notification_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Notification_Type_entries,
      Notification_Type_entries_by_number,
      14, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Notification_Type_strings[idx].get();
}
bool Notification_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Notification_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Notification_Type_entries, 14, name, &int_value);
  if (success) {
    *value = static_cast<Notification_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Notification_Type Notification::continued;
constexpr Notification_Type Notification::halted;
constexpr Notification_Type Notification::paused;
constexpr Notification_Type Notification::stepped;
constexpr Notification_Type Notification::hitbreakpoint;
constexpr Notification_Type Notification::newevent;
constexpr Notification_Type Notification::changeaffected;
constexpr Notification_Type Notification::dump;
constexpr Notification_Type Notification::dumplocals;
constexpr Notification_Type Notification::snapshot;
constexpr Notification_Type Notification::dumpevents;
constexpr Notification_Type Notification::dumpcallbacks;
constexpr Notification_Type Notification::malformed;
constexpr Notification_Type Notification::unknown;
constexpr Notification_Type Notification::Type_MIN;
constexpr Notification_Type Notification::Type_MAX;
constexpr int Notification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool Value_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Value_Type_strings[5] = {};

static const char Value_Type_names[] =
  "any"
  "f32"
  "f64"
  "i32"
  "i64";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Value_Type_entries[] = {
  { {Value_Type_names + 0, 3}, 4 },
  { {Value_Type_names + 3, 3}, 2 },
  { {Value_Type_names + 6, 3}, 3 },
  { {Value_Type_names + 9, 3}, 0 },
  { {Value_Type_names + 12, 3}, 1 },
};

static const int Value_Type_entries_by_number[] = {
  3, // 0 -> i32
  4, // 1 -> i64
  1, // 2 -> f32
  2, // 3 -> f64
  0, // 4 -> any
};

const std::string& Value_Type_Name(
    Value_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Value_Type_entries,
          Value_Type_entries_by_number,
          5, Value_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Value_Type_entries,
      Value_Type_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Value_Type_strings[idx].get();
}
bool Value_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Value_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Value_Type_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<Value_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Value_Type Value::i32;
constexpr Value_Type Value::i64;
constexpr Value_Type Value::f32;
constexpr Value_Type Value::f64;
constexpr Value_Type Value::any;
constexpr Value_Type Value::Type_MIN;
constexpr Value_Type Value::Type_MAX;
constexpr int Value::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> State_strings[5] = {};

static const char State_names[] =
  "PROXYhalt"
  "PROXYrun"
  "WARDUINOpause"
  "WARDUINOrun"
  "WARDUINOstep";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry State_entries[] = {
  { {State_names + 0, 9}, 4 },
  { {State_names + 9, 8}, 3 },
  { {State_names + 17, 13}, 1 },
  { {State_names + 30, 11}, 0 },
  { {State_names + 41, 12}, 2 },
};

static const int State_entries_by_number[] = {
  3, // 0 -> WARDUINOrun
  2, // 1 -> WARDUINOpause
  4, // 2 -> WARDUINOstep
  1, // 3 -> PROXYrun
  0, // 4 -> PROXYhalt
};

const std::string& State_Name(
    State value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          State_entries,
          State_entries_by_number,
          5, State_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      State_entries,
      State_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     State_strings[idx].get();
}
bool State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, State* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      State_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<State>(int_value);
  }
  return success;
}
bool Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Command_strings[21] = {};

static const char Command_names[] =
  "bpadd"
  "bprem"
  "dump"
  "dumpcallbacks"
  "dumpevents"
  "dumplocals"
  "halt"
  "loadsnapshot"
  "pause"
  "popevent"
  "proxify"
  "proxyadd"
  "proxycall"
  "proxyrem"
  "pushevent"
  "run"
  "snapshot"
  "step"
  "updatecallbacks"
  "updatefunc"
  "updatelocal";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Command_entries[] = {
  { {Command_names + 0, 5}, 4 },
  { {Command_names + 5, 5}, 5 },
  { {Command_names + 10, 4}, 6 },
  { {Command_names + 14, 13}, 10 },
  { {Command_names + 27, 10}, 9 },
  { {Command_names + 37, 10}, 7 },
  { {Command_names + 47, 4}, 1 },
  { {Command_names + 51, 12}, 14 },
  { {Command_names + 63, 5}, 2 },
  { {Command_names + 68, 8}, 19 },
  { {Command_names + 76, 7}, 15 },
  { {Command_names + 83, 8}, 16 },
  { {Command_names + 91, 9}, 18 },
  { {Command_names + 100, 8}, 17 },
  { {Command_names + 108, 9}, 20 },
  { {Command_names + 117, 3}, 0 },
  { {Command_names + 120, 8}, 8 },
  { {Command_names + 128, 4}, 3 },
  { {Command_names + 132, 15}, 13 },
  { {Command_names + 147, 10}, 11 },
  { {Command_names + 157, 11}, 12 },
};

static const int Command_entries_by_number[] = {
  15, // 0 -> run
  6, // 1 -> halt
  8, // 2 -> pause
  17, // 3 -> step
  0, // 4 -> bpadd
  1, // 5 -> bprem
  2, // 6 -> dump
  5, // 7 -> dumplocals
  16, // 8 -> snapshot
  4, // 9 -> dumpevents
  3, // 10 -> dumpcallbacks
  19, // 11 -> updatefunc
  20, // 12 -> updatelocal
  18, // 13 -> updatecallbacks
  7, // 14 -> loadsnapshot
  10, // 15 -> proxify
  11, // 16 -> proxyadd
  13, // 17 -> proxyrem
  12, // 18 -> proxycall
  9, // 19 -> popevent
  14, // 20 -> pushevent
};

const std::string& Command_Name(
    Command value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Command_entries,
          Command_entries_by_number,
          21, Command_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Command_entries,
      Command_entries_by_number,
      21, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Command_strings[idx].get();
}
bool Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Command* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Command_entries, 21, name, &int_value);
  if (success) {
    *value = static_cast<Command>(int_value);
  }
  return success;
}

// ===================================================================

class DebugMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugMessage>()._impl_._has_bits_);
  static const ::debug::Payload& payload(const DebugMessage* msg);
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::debug::Payload&
DebugMessage::_Internal::payload(const DebugMessage* msg) {
  return *msg->_impl_.payload_;
}
DebugMessage::DebugMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:debug.DebugMessage)
}
DebugMessage::DebugMessage(const DebugMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DebugMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.command_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_payload()) {
    _this->_impl_.payload_ = new ::debug::Payload(*from._impl_.payload_);
  }
  _this->_impl_.command_ = from._impl_.command_;
  // @@protoc_insertion_point(copy_constructor:debug.DebugMessage)
}

inline void DebugMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.command_){0}
  };
}

DebugMessage::~DebugMessage() {
  // @@protoc_insertion_point(destructor:debug.DebugMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.payload_;
}

void DebugMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:debug.DebugMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.payload_ != nullptr);
    _impl_.payload_->Clear();
  }
  _impl_.command_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DebugMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .debug.Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::debug::Command>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .debug.Payload payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:debug.DebugMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .debug.Command command = 1;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  // optional .debug.Payload payload = 2;
  if (_internal_has_payload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:debug.DebugMessage)
  return target;
}

size_t DebugMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:debug.DebugMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .debug.Payload payload = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payload_);
  }

  // .debug.Command command = 1;
  if (this->_internal_command() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DebugMessage*>(
      &from));
}

void DebugMessage::MergeFrom(const DebugMessage& from) {
  DebugMessage* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:debug.DebugMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_payload()) {
    _this->_internal_mutable_payload()->::debug::Payload::MergeFrom(
        from._internal_payload());
  }
  if (from._internal_command() != 0) {
    _this->_internal_set_command(from._internal_command());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DebugMessage::CopyFrom(const DebugMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:debug.DebugMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugMessage::IsInitialized() const {
  return true;
}

void DebugMessage::InternalSwap(DebugMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugMessage, _impl_.command_)
      + sizeof(DebugMessage::_impl_.command_)
      - PROTOBUF_FIELD_OFFSET(DebugMessage, _impl_.payload_)>(
          reinterpret_cast<char*>(&_impl_.payload_),
          reinterpret_cast<char*>(&other->_impl_.payload_));
}

std::string DebugMessage::GetTypeName() const {
  return "debug.DebugMessage";
}


// ===================================================================

class Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<Notification>()._impl_._has_bits_);
  static const ::debug::Payload& payload(const Notification* msg);
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::debug::Payload&
Notification::_Internal::payload(const Notification* msg) {
  return *msg->_impl_.payload_;
}
Notification::Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:debug.Notification)
}
Notification::Notification(const Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Notification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_payload()) {
    _this->_impl_.payload_ = new ::debug::Payload(*from._impl_.payload_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:debug.Notification)
}

inline void Notification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.type_){0}
  };
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:debug.Notification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.payload_;
}

void Notification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:debug.Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.payload_ != nullptr);
    _impl_.payload_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Notification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .debug.Notification.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::debug::Notification_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .debug.Payload payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:debug.Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .debug.Notification.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .debug.Payload payload = 2;
  if (_internal_has_payload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:debug.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:debug.Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .debug.Payload payload = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payload_);
  }

  // .debug.Notification.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Notification::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Notification*>(
      &from));
}

void Notification::MergeFrom(const Notification& from) {
  Notification* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:debug.Notification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_payload()) {
    _this->_internal_mutable_payload()->::debug::Payload::MergeFrom(
        from._internal_payload());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:debug.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  return true;
}

void Notification::InternalSwap(Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Notification, _impl_.type_)
      + sizeof(Notification::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Notification, _impl_.payload_)>(
          reinterpret_cast<char*>(&_impl_.payload_),
          reinterpret_cast<char*>(&other->_impl_.payload_));
}

std::string Notification::GetTypeName() const {
  return "debug.Notification";
}


// ===================================================================

class Payload::_Internal {
 public:
  static const ::debug::Snapshot& snapshot(const Payload* msg);
  static const ::debug::Locals& locals(const Payload* msg);
  static const ::debug::Function& function(const Payload* msg);
  static const ::debug::EventsQueue& queue(const Payload* msg);
  static const ::debug::Event& event(const Payload* msg);
  static const ::debug::Range& range(const Payload* msg);
  static const ::debug::CallbackMapping& callbacks(const Payload* msg);
  static const ::debug::RFC& call(const Payload* msg);
};

const ::debug::Snapshot&
Payload::_Internal::snapshot(const Payload* msg) {
  return *msg->_impl_.payload_.snapshot_;
}
const ::debug::Locals&
Payload::_Internal::locals(const Payload* msg) {
  return *msg->_impl_.payload_.locals_;
}
const ::debug::Function&
Payload::_Internal::function(const Payload* msg) {
  return *msg->_impl_.payload_.function_;
}
const ::debug::EventsQueue&
Payload::_Internal::queue(const Payload* msg) {
  return *msg->_impl_.payload_.queue_;
}
const ::debug::Event&
Payload::_Internal::event(const Payload* msg) {
  return *msg->_impl_.payload_.event_;
}
const ::debug::Range&
Payload::_Internal::range(const Payload* msg) {
  return *msg->_impl_.payload_.range_;
}
const ::debug::CallbackMapping&
Payload::_Internal::callbacks(const Payload* msg) {
  return *msg->_impl_.payload_.callbacks_;
}
const ::debug::RFC&
Payload::_Internal::call(const Payload* msg) {
  return *msg->_impl_.payload_.call_;
}
void Payload::set_allocated_snapshot(::debug::Snapshot* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    set_has_snapshot();
    _impl_.payload_.snapshot_ = snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:debug.Payload.snapshot)
}
void Payload::set_allocated_locals(::debug::Locals* locals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (locals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(locals);
    if (message_arena != submessage_arena) {
      locals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locals, submessage_arena);
    }
    set_has_locals();
    _impl_.payload_.locals_ = locals;
  }
  // @@protoc_insertion_point(field_set_allocated:debug.Payload.locals)
}
void Payload::set_allocated_function(::debug::Function* function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(function);
    if (message_arena != submessage_arena) {
      function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    set_has_function();
    _impl_.payload_.function_ = function;
  }
  // @@protoc_insertion_point(field_set_allocated:debug.Payload.function)
}
void Payload::set_allocated_queue(::debug::EventsQueue* queue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (queue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(queue);
    if (message_arena != submessage_arena) {
      queue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queue, submessage_arena);
    }
    set_has_queue();
    _impl_.payload_.queue_ = queue;
  }
  // @@protoc_insertion_point(field_set_allocated:debug.Payload.queue)
}
void Payload::set_allocated_event(::debug::Event* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    _impl_.payload_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:debug.Payload.event)
}
void Payload::set_allocated_range(::debug::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    set_has_range();
    _impl_.payload_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:debug.Payload.range)
}
void Payload::set_allocated_callbacks(::debug::CallbackMapping* callbacks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (callbacks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(callbacks);
    if (message_arena != submessage_arena) {
      callbacks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, callbacks, submessage_arena);
    }
    set_has_callbacks();
    _impl_.payload_.callbacks_ = callbacks;
  }
  // @@protoc_insertion_point(field_set_allocated:debug.Payload.callbacks)
}
void Payload::set_allocated_call(::debug::RFC* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(call);
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    set_has_call();
    _impl_.payload_.call_ = call;
  }
  // @@protoc_insertion_point(field_set_allocated:debug.Payload.call)
}
Payload::Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:debug.Payload)
}
Payload::Payload(const Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Payload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kSnapshot: {
      _this->_internal_mutable_snapshot()->::debug::Snapshot::MergeFrom(
          from._internal_snapshot());
      break;
    }
    case kLocals: {
      _this->_internal_mutable_locals()->::debug::Locals::MergeFrom(
          from._internal_locals());
      break;
    }
    case kFunction: {
      _this->_internal_mutable_function()->::debug::Function::MergeFrom(
          from._internal_function());
      break;
    }
    case kBreakpoint: {
      _this->_internal_set_breakpoint(from._internal_breakpoint());
      break;
    }
    case kQueue: {
      _this->_internal_mutable_queue()->::debug::EventsQueue::MergeFrom(
          from._internal_queue());
      break;
    }
    case kEvent: {
      _this->_internal_mutable_event()->::debug::Event::MergeFrom(
          from._internal_event());
      break;
    }
    case kRange: {
      _this->_internal_mutable_range()->::debug::Range::MergeFrom(
          from._internal_range());
      break;
    }
    case kCallbacks: {
      _this->_internal_mutable_callbacks()->::debug::CallbackMapping::MergeFrom(
          from._internal_callbacks());
      break;
    }
    case kCall: {
      _this->_internal_mutable_call()->::debug::RFC::MergeFrom(
          from._internal_call());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:debug.Payload)
}

inline void Payload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

Payload::~Payload() {
  // @@protoc_insertion_point(destructor:debug.Payload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Payload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void Payload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Payload::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:debug.Payload)
  switch (payload_case()) {
    case kSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.snapshot_;
      }
      break;
    }
    case kLocals: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.locals_;
      }
      break;
    }
    case kFunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.function_;
      }
      break;
    }
    case kBreakpoint: {
      _impl_.payload_.breakpoint_.Destroy();
      break;
    }
    case kQueue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.queue_;
      }
      break;
    }
    case kEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.event_;
      }
      break;
    }
    case kRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.range_;
      }
      break;
    }
    case kCallbacks: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.callbacks_;
      }
      break;
    }
    case kCall: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.call_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:debug.Payload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<std::string>();
}

const char* Payload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .debug.Snapshot snapshot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .debug.Locals locals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_locals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .debug.Function function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string breakpoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_breakpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .debug.EventsQueue queue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_queue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .debug.Event event = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .debug.Range range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .debug.CallbackMapping callbacks = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_callbacks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .debug.RFC call = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Payload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:debug.Payload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .debug.Snapshot snapshot = 1;
  if (_internal_has_snapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::snapshot(this),
        _Internal::snapshot(this).GetCachedSize(), target, stream);
  }

  // .debug.Locals locals = 2;
  if (_internal_has_locals()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::locals(this),
        _Internal::locals(this).GetCachedSize(), target, stream);
  }

  // .debug.Function function = 3;
  if (_internal_has_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::function(this),
        _Internal::function(this).GetCachedSize(), target, stream);
  }

  // string breakpoint = 4;
  if (_internal_has_breakpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_breakpoint().data(), static_cast<int>(this->_internal_breakpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "debug.Payload.breakpoint");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_breakpoint(), target);
  }

  // .debug.EventsQueue queue = 5;
  if (_internal_has_queue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::queue(this),
        _Internal::queue(this).GetCachedSize(), target, stream);
  }

  // .debug.Event event = 6;
  if (_internal_has_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  // .debug.Range range = 7;
  if (_internal_has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // .debug.CallbackMapping callbacks = 8;
  if (_internal_has_callbacks()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::callbacks(this),
        _Internal::callbacks(this).GetCachedSize(), target, stream);
  }

  // .debug.RFC call = 9;
  if (_internal_has_call()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::call(this),
        _Internal::call(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:debug.Payload)
  return target;
}

size_t Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:debug.Payload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .debug.Snapshot snapshot = 1;
    case kSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.snapshot_);
      break;
    }
    // .debug.Locals locals = 2;
    case kLocals: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.locals_);
      break;
    }
    // .debug.Function function = 3;
    case kFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.function_);
      break;
    }
    // string breakpoint = 4;
    case kBreakpoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_breakpoint());
      break;
    }
    // .debug.EventsQueue queue = 5;
    case kQueue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.queue_);
      break;
    }
    // .debug.Event event = 6;
    case kEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.event_);
      break;
    }
    // .debug.Range range = 7;
    case kRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.range_);
      break;
    }
    // .debug.CallbackMapping callbacks = 8;
    case kCallbacks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.callbacks_);
      break;
    }
    // .debug.RFC call = 9;
    case kCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.call_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Payload::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Payload*>(
      &from));
}

void Payload::MergeFrom(const Payload& from) {
  Payload* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:debug.Payload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kSnapshot: {
      _this->_internal_mutable_snapshot()->::debug::Snapshot::MergeFrom(
          from._internal_snapshot());
      break;
    }
    case kLocals: {
      _this->_internal_mutable_locals()->::debug::Locals::MergeFrom(
          from._internal_locals());
      break;
    }
    case kFunction: {
      _this->_internal_mutable_function()->::debug::Function::MergeFrom(
          from._internal_function());
      break;
    }
    case kBreakpoint: {
      _this->_internal_set_breakpoint(from._internal_breakpoint());
      break;
    }
    case kQueue: {
      _this->_internal_mutable_queue()->::debug::EventsQueue::MergeFrom(
          from._internal_queue());
      break;
    }
    case kEvent: {
      _this->_internal_mutable_event()->::debug::Event::MergeFrom(
          from._internal_event());
      break;
    }
    case kRange: {
      _this->_internal_mutable_range()->::debug::Range::MergeFrom(
          from._internal_range());
      break;
    }
    case kCallbacks: {
      _this->_internal_mutable_callbacks()->::debug::CallbackMapping::MergeFrom(
          from._internal_callbacks());
      break;
    }
    case kCall: {
      _this->_internal_mutable_call()->::debug::RFC::MergeFrom(
          from._internal_call());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Payload::CopyFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:debug.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload::IsInitialized() const {
  return true;
}

void Payload::InternalSwap(Payload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string Payload::GetTypeName() const {
  return "debug.Payload";
}


// ===================================================================

class Snapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<Snapshot>()._impl_._has_bits_);
  static const ::debug::Locals& locals(const Snapshot* msg);
  static void set_has_locals(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::debug::EventsQueue& queue(const Snapshot* msg);
  static void set_has_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::debug::CallbackMapping& callbacks(const Snapshot* msg);
  static void set_has_callbacks(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::debug::Locals&
Snapshot::_Internal::locals(const Snapshot* msg) {
  return *msg->_impl_.locals_;
}
const ::debug::EventsQueue&
Snapshot::_Internal::queue(const Snapshot* msg) {
  return *msg->_impl_.queue_;
}
const ::debug::CallbackMapping&
Snapshot::_Internal::callbacks(const Snapshot* msg) {
  return *msg->_impl_.callbacks_;
}
Snapshot::Snapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:debug.Snapshot)
}
Snapshot::Snapshot(const Snapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Snapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.breakpoints_){from._impl_.breakpoints_}
    , decltype(_impl_.functions_){from._impl_.functions_}
    , decltype(_impl_.callstack_){from._impl_.callstack_}
    , decltype(_impl_.locals_){nullptr}
    , decltype(_impl_.queue_){nullptr}
    , decltype(_impl_.callbacks_){nullptr}
    , decltype(_impl_.program_counter_){}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_locals()) {
    _this->_impl_.locals_ = new ::debug::Locals(*from._impl_.locals_);
  }
  if (from._internal_has_queue()) {
    _this->_impl_.queue_ = new ::debug::EventsQueue(*from._impl_.queue_);
  }
  if (from._internal_has_callbacks()) {
    _this->_impl_.callbacks_ = new ::debug::CallbackMapping(*from._impl_.callbacks_);
  }
  ::memcpy(&_impl_.program_counter_, &from._impl_.program_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.program_counter_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:debug.Snapshot)
}

inline void Snapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.breakpoints_){arena}
    , decltype(_impl_.functions_){arena}
    , decltype(_impl_.callstack_){arena}
    , decltype(_impl_.locals_){nullptr}
    , decltype(_impl_.queue_){nullptr}
    , decltype(_impl_.callbacks_){nullptr}
    , decltype(_impl_.program_counter_){0u}
    , decltype(_impl_.state_){0}
  };
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:debug.Snapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Snapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.breakpoints_.~RepeatedPtrField();
  _impl_.functions_.~RepeatedPtrField();
  _impl_.callstack_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.locals_;
  if (this != internal_default_instance()) delete _impl_.queue_;
  if (this != internal_default_instance()) delete _impl_.callbacks_;
}

void Snapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:debug.Snapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.breakpoints_.Clear();
  _impl_.functions_.Clear();
  _impl_.callstack_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.locals_ != nullptr);
      _impl_.locals_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.queue_ != nullptr);
      _impl_.queue_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.callbacks_ != nullptr);
      _impl_.callbacks_->Clear();
    }
  }
  ::memset(&_impl_.program_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.program_counter_)) + sizeof(_impl_.state_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Snapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 program_counter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.program_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .debug.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::debug::State>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string breakpoints = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_breakpoints();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .debug.Function functions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_functions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .debug.CallstackEntry callstack = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_callstack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .debug.Locals locals = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_locals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .debug.EventsQueue queue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_queue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .debug.CallbackMapping callbacks = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_callbacks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:debug.Snapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 program_counter = 1;
  if (this->_internal_program_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_program_counter(), target);
  }

  // .debug.State state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // repeated string breakpoints = 3;
  for (int i = 0, n = this->_internal_breakpoints_size(); i < n; i++) {
    const auto& s = this->_internal_breakpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "debug.Snapshot.breakpoints");
    target = stream->WriteString(3, s, target);
  }

  // repeated .debug.Function functions = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_functions_size()); i < n; i++) {
    const auto& repfield = this->_internal_functions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .debug.CallstackEntry callstack = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_callstack_size()); i < n; i++) {
    const auto& repfield = this->_internal_callstack(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .debug.Locals locals = 6;
  if (_internal_has_locals()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::locals(this),
        _Internal::locals(this).GetCachedSize(), target, stream);
  }

  // optional .debug.EventsQueue queue = 7;
  if (_internal_has_queue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::queue(this),
        _Internal::queue(this).GetCachedSize(), target, stream);
  }

  // optional .debug.CallbackMapping callbacks = 8;
  if (_internal_has_callbacks()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::callbacks(this),
        _Internal::callbacks(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:debug.Snapshot)
  return target;
}

size_t Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:debug.Snapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string breakpoints = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.breakpoints_.size());
  for (int i = 0, n = _impl_.breakpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.breakpoints_.Get(i));
  }

  // repeated .debug.Function functions = 4;
  total_size += 1UL * this->_internal_functions_size();
  for (const auto& msg : this->_impl_.functions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .debug.CallstackEntry callstack = 5;
  total_size += 1UL * this->_internal_callstack_size();
  for (const auto& msg : this->_impl_.callstack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .debug.Locals locals = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.locals_);
    }

    // optional .debug.EventsQueue queue = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.queue_);
    }

    // optional .debug.CallbackMapping callbacks = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.callbacks_);
    }

  }
  // uint32 program_counter = 1;
  if (this->_internal_program_counter() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_program_counter());
  }

  // .debug.State state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Snapshot::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Snapshot*>(
      &from));
}

void Snapshot::MergeFrom(const Snapshot& from) {
  Snapshot* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:debug.Snapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.breakpoints_.MergeFrom(from._impl_.breakpoints_);
  _this->_impl_.functions_.MergeFrom(from._impl_.functions_);
  _this->_impl_.callstack_.MergeFrom(from._impl_.callstack_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_locals()->::debug::Locals::MergeFrom(
          from._internal_locals());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_queue()->::debug::EventsQueue::MergeFrom(
          from._internal_queue());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_callbacks()->::debug::CallbackMapping::MergeFrom(
          from._internal_callbacks());
    }
  }
  if (from._internal_program_counter() != 0) {
    _this->_internal_set_program_counter(from._internal_program_counter());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:debug.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snapshot::IsInitialized() const {
  return true;
}

void Snapshot::InternalSwap(Snapshot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.breakpoints_.InternalSwap(&other->_impl_.breakpoints_);
  _impl_.functions_.InternalSwap(&other->_impl_.functions_);
  _impl_.callstack_.InternalSwap(&other->_impl_.callstack_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.state_)
      + sizeof(Snapshot::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.locals_)>(
          reinterpret_cast<char*>(&_impl_.locals_),
          reinterpret_cast<char*>(&other->_impl_.locals_));
}

std::string Snapshot::GetTypeName() const {
  return "debug.Snapshot";
}


// ===================================================================

class Function::_Internal {
 public:
  static const ::debug::Range& range(const Function* msg);
  static const ::debug::Locals& locals(const Function* msg);
};

const ::debug::Range&
Function::_Internal::range(const Function* msg) {
  return *msg->_impl_.range_;
}
const ::debug::Locals&
Function::_Internal::locals(const Function* msg) {
  return *msg->_impl_.locals_;
}
Function::Function(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:debug.Function)
}
Function::Function(const Function& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Function* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instructions_){}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.locals_){nullptr}
    , decltype(_impl_.fidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.instructions_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instructions_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instructions().empty()) {
    _this->_impl_.instructions_.Set(from._internal_instructions(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::debug::Range(*from._impl_.range_);
  }
  if (from._internal_has_locals()) {
    _this->_impl_.locals_ = new ::debug::Locals(*from._impl_.locals_);
  }
  _this->_impl_.fidx_ = from._impl_.fidx_;
  // @@protoc_insertion_point(copy_constructor:debug.Function)
}

inline void Function::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instructions_){}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.locals_){nullptr}
    , decltype(_impl_.fidx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instructions_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instructions_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Function::~Function() {
  // @@protoc_insertion_point(destructor:debug.Function)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Function::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instructions_.Destroy();
  if (this != internal_default_instance()) delete _impl_.range_;
  if (this != internal_default_instance()) delete _impl_.locals_;
}

void Function::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Function::Clear() {
// @@protoc_insertion_point(message_clear_start:debug.Function)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instructions_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.range_ != nullptr) {
    delete _impl_.range_;
  }
  _impl_.range_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.locals_ != nullptr) {
    delete _impl_.locals_;
  }
  _impl_.locals_ = nullptr;
  _impl_.fidx_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* Function::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 fidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .debug.Range range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .debug.Locals locals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_locals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes instructions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_instructions();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Function::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:debug.Function)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fidx = 1;
  if (this->_internal_fidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_fidx(), target);
  }

  // .debug.Range range = 2;
  if (this->_internal_has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // .debug.Locals locals = 3;
  if (this->_internal_has_locals()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::locals(this),
        _Internal::locals(this).GetCachedSize(), target, stream);
  }

  // bytes instructions = 4;
  if (!this->_internal_instructions().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_instructions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:debug.Function)
  return target;
}

size_t Function::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:debug.Function)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes instructions = 4;
  if (!this->_internal_instructions().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instructions());
  }

  // .debug.Range range = 2;
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  // .debug.Locals locals = 3;
  if (this->_internal_has_locals()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.locals_);
  }

  // int32 fidx = 1;
  if (this->_internal_fidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fidx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Function::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Function*>(
      &from));
}

void Function::MergeFrom(const Function& from) {
  Function* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:debug.Function)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instructions().empty()) {
    _this->_internal_set_instructions(from._internal_instructions());
  }
  if (from._internal_has_range()) {
    _this->_internal_mutable_range()->::debug::Range::MergeFrom(
        from._internal_range());
  }
  if (from._internal_has_locals()) {
    _this->_internal_mutable_locals()->::debug::Locals::MergeFrom(
        from._internal_locals());
  }
  if (from._internal_fidx() != 0) {
    _this->_internal_set_fidx(from._internal_fidx());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Function::CopyFrom(const Function& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:debug.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function::IsInitialized() const {
  return true;
}

void Function::InternalSwap(Function* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instructions_, lhs_arena,
      &other->_impl_.instructions_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Function, _impl_.fidx_)
      + sizeof(Function::_impl_.fidx_)
      - PROTOBUF_FIELD_OFFSET(Function, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

std::string Function::GetTypeName() const {
  return "debug.Function";
}


// ===================================================================

class RFC::_Internal {
 public:
};

RFC::RFC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:debug.RFC)
}
RFC::RFC(const RFC& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RFC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){from._impl_.args_}
    , decltype(_impl_.fidx_){}
    , decltype(_impl_.argcount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.fidx_, &from._impl_.fidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.argcount_) -
    reinterpret_cast<char*>(&_impl_.fidx_)) + sizeof(_impl_.argcount_));
  // @@protoc_insertion_point(copy_constructor:debug.RFC)
}

inline void RFC::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){arena}
    , decltype(_impl_.fidx_){0}
    , decltype(_impl_.argcount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RFC::~RFC() {
  // @@protoc_insertion_point(destructor:debug.RFC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RFC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.args_.~RepeatedPtrField();
}

void RFC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RFC::Clear() {
// @@protoc_insertion_point(message_clear_start:debug.RFC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.args_.Clear();
  ::memset(&_impl_.fidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.argcount_) -
      reinterpret_cast<char*>(&_impl_.fidx_)) + sizeof(_impl_.argcount_));
  _internal_metadata_.Clear<std::string>();
}

const char* RFC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 fidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 argcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.argcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .debug.Value args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RFC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:debug.RFC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fidx = 1;
  if (this->_internal_fidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_fidx(), target);
  }

  // int32 argcount = 2;
  if (this->_internal_argcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_argcount(), target);
  }

  // repeated .debug.Value args = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_args_size()); i < n; i++) {
    const auto& repfield = this->_internal_args(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:debug.RFC)
  return target;
}

size_t RFC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:debug.RFC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .debug.Value args = 3;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->_impl_.args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 fidx = 1;
  if (this->_internal_fidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fidx());
  }

  // int32 argcount = 2;
  if (this->_internal_argcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_argcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RFC::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RFC*>(
      &from));
}

void RFC::MergeFrom(const RFC& from) {
  RFC* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:debug.RFC)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.args_.MergeFrom(from._impl_.args_);
  if (from._internal_fidx() != 0) {
    _this->_internal_set_fidx(from._internal_fidx());
  }
  if (from._internal_argcount() != 0) {
    _this->_internal_set_argcount(from._internal_argcount());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RFC::CopyFrom(const RFC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:debug.RFC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RFC::IsInitialized() const {
  return true;
}

void RFC::InternalSwap(RFC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.args_.InternalSwap(&other->_impl_.args_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RFC, _impl_.argcount_)
      + sizeof(RFC::_impl_.argcount_)
      - PROTOBUF_FIELD_OFFSET(RFC, _impl_.fidx_)>(
          reinterpret_cast<char*>(&_impl_.fidx_),
          reinterpret_cast<char*>(&other->_impl_.fidx_));
}

std::string RFC::GetTypeName() const {
  return "debug.RFC";
}


// ===================================================================

class CallstackEntry::_Internal {
 public:
};

CallstackEntry::CallstackEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:debug.CallstackEntry)
}
CallstackEntry::CallstackEntry(const CallstackEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallstackEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.fidx_){}
    , decltype(_impl_.sp_){}
    , decltype(_impl_.fp_){}
    , decltype(_impl_.start_){}
    , decltype(_impl_.ra_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ra_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.ra_));
  // @@protoc_insertion_point(copy_constructor:debug.CallstackEntry)
}

inline void CallstackEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.fidx_){0}
    , decltype(_impl_.sp_){0}
    , decltype(_impl_.fp_){0}
    , decltype(_impl_.start_){0}
    , decltype(_impl_.ra_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CallstackEntry::~CallstackEntry() {
  // @@protoc_insertion_point(destructor:debug.CallstackEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallstackEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallstackEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallstackEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:debug.CallstackEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ra_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.ra_));
  _internal_metadata_.Clear<std::string>();
}

const char* CallstackEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fidx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.fidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.fp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ra = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.ra_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallstackEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:debug.CallstackEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 fidx = 2;
  if (this->_internal_fidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_fidx(), target);
  }

  // int32 sp = 3;
  if (this->_internal_sp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sp(), target);
  }

  // int32 fp = 4;
  if (this->_internal_fp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_fp(), target);
  }

  // int32 start = 5;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_start(), target);
  }

  // int32 ra = 6;
  if (this->_internal_ra() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_ra(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:debug.CallstackEntry)
  return target;
}

size_t CallstackEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:debug.CallstackEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 fidx = 2;
  if (this->_internal_fidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fidx());
  }

  // int32 sp = 3;
  if (this->_internal_sp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sp());
  }

  // int32 fp = 4;
  if (this->_internal_fp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fp());
  }

  // int32 start = 5;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 ra = 6;
  if (this->_internal_ra() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ra());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallstackEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallstackEntry*>(
      &from));
}

void CallstackEntry::MergeFrom(const CallstackEntry& from) {
  CallstackEntry* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:debug.CallstackEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_fidx() != 0) {
    _this->_internal_set_fidx(from._internal_fidx());
  }
  if (from._internal_sp() != 0) {
    _this->_internal_set_sp(from._internal_sp());
  }
  if (from._internal_fp() != 0) {
    _this->_internal_set_fp(from._internal_fp());
  }
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_ra() != 0) {
    _this->_internal_set_ra(from._internal_ra());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallstackEntry::CopyFrom(const CallstackEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:debug.CallstackEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallstackEntry::IsInitialized() const {
  return true;
}

void CallstackEntry::InternalSwap(CallstackEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallstackEntry, _impl_.ra_)
      + sizeof(CallstackEntry::_impl_.ra_)
      - PROTOBUF_FIELD_OFFSET(CallstackEntry, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

std::string CallstackEntry::GetTypeName() const {
  return "debug.CallstackEntry";
}


// ===================================================================

class Locals::_Internal {
 public:
};

Locals::Locals(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:debug.Locals)
}
Locals::Locals(const Locals& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Locals* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:debug.Locals)
}

inline void Locals::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Locals::~Locals() {
  // @@protoc_insertion_point(destructor:debug.Locals)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Locals::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void Locals::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Locals::Clear() {
// @@protoc_insertion_point(message_clear_start:debug.Locals)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _impl_.count_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* Locals::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .debug.Value values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Locals::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:debug.Locals)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // repeated .debug.Value values = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:debug.Locals)
  return target;
}

size_t Locals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:debug.Locals)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .debug.Value values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Locals::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Locals*>(
      &from));
}

void Locals::MergeFrom(const Locals& from) {
  Locals* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:debug.Locals)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Locals::CopyFrom(const Locals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:debug.Locals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Locals::IsInitialized() const {
  return true;
}

void Locals::InternalSwap(Locals* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.count_, other->_impl_.count_);
}

std::string Locals::GetTypeName() const {
  return "debug.Locals";
}


// ===================================================================

class Value::_Internal {
 public:
};

Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:debug.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Value* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:debug.Value)
}

inline void Value::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:debug.Value)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void Value::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:debug.Value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<std::string>();
}

const char* Value::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .debug.Value.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::debug::Value_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:debug.Value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .debug.Value.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "debug.Value.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:debug.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:debug.Value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .debug.Value.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Value*>(
      &from));
}

void Value::MergeFrom(const Value& from) {
  Value* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:debug.Value)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:debug.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Value, _impl_.index_)
      + sizeof(Value::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(Value, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

std::string Value::GetTypeName() const {
  return "debug.Value";
}


// ===================================================================

class CallbackMapping::_Internal {
 public:
};

CallbackMapping::CallbackMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:debug.CallbackMapping)
}
CallbackMapping::CallbackMapping(const CallbackMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackMapping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:debug.CallbackMapping)
}

inline void CallbackMapping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CallbackMapping::~CallbackMapping() {
  // @@protoc_insertion_point(destructor:debug.CallbackMapping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackMapping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void CallbackMapping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:debug.CallbackMapping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackMapping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .debug.CallbackEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallbackMapping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:debug.CallbackMapping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .debug.CallbackEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:debug.CallbackMapping)
  return target;
}

size_t CallbackMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:debug.CallbackMapping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .debug.CallbackEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackMapping::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackMapping*>(
      &from));
}

void CallbackMapping::MergeFrom(const CallbackMapping& from) {
  CallbackMapping* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:debug.CallbackMapping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackMapping::CopyFrom(const CallbackMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:debug.CallbackMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackMapping::IsInitialized() const {
  return true;
}

void CallbackMapping::InternalSwap(CallbackMapping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

std::string CallbackMapping::GetTypeName() const {
  return "debug.CallbackMapping";
}


// ===================================================================

class CallbackEntry::_Internal {
 public:
};

CallbackEntry::CallbackEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:debug.CallbackEntry)
}
CallbackEntry::CallbackEntry(const CallbackEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tidx_){from._impl_.tidx_}
    , /*decltype(_impl_._tidx_cached_byte_size_)*/{0}
    , decltype(_impl_.topic_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic().empty()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:debug.CallbackEntry)
}

inline void CallbackEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tidx_){arena}
    , /*decltype(_impl_._tidx_cached_byte_size_)*/{0}
    , decltype(_impl_.topic_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallbackEntry::~CallbackEntry() {
  // @@protoc_insertion_point(destructor:debug.CallbackEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tidx_.~RepeatedField();
  _impl_.topic_.Destroy();
}

void CallbackEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:debug.CallbackEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tidx_.Clear();
  _impl_.topic_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 tidx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_tidx(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_tidx(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallbackEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:debug.CallbackEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "debug.CallbackEntry.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // repeated int32 tidx = 2;
  {
    int byte_size = _impl_._tidx_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_tidx(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:debug.CallbackEntry)
  return target;
}

size_t CallbackEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:debug.CallbackEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 tidx = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.tidx_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._tidx_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackEntry*>(
      &from));
}

void CallbackEntry::MergeFrom(const CallbackEntry& from) {
  CallbackEntry* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:debug.CallbackEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tidx_.MergeFrom(from._impl_.tidx_);
  if (!from._internal_topic().empty()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackEntry::CopyFrom(const CallbackEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:debug.CallbackEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackEntry::IsInitialized() const {
  return true;
}

void CallbackEntry::InternalSwap(CallbackEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tidx_.InternalSwap(&other->_impl_.tidx_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
}

std::string CallbackEntry::GetTypeName() const {
  return "debug.CallbackEntry";
}


// ===================================================================

class EventsQueue::_Internal {
 public:
  using HasBits = decltype(std::declval<EventsQueue>()._impl_._has_bits_);
  static const ::debug::Range& range(const EventsQueue* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::debug::Range&
EventsQueue::_Internal::range(const EventsQueue* msg) {
  return *msg->_impl_.range_;
}
EventsQueue::EventsQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:debug.EventsQueue)
}
EventsQueue::EventsQueue(const EventsQueue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  EventsQueue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::debug::Range(*from._impl_.range_);
  }
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:debug.EventsQueue)
}

inline void EventsQueue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.count_){0}
  };
}

EventsQueue::~EventsQueue() {
  // @@protoc_insertion_point(destructor:debug.EventsQueue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventsQueue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.range_;
}

void EventsQueue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventsQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:debug.EventsQueue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.range_ != nullptr);
    _impl_.range_->Clear();
  }
  _impl_.count_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EventsQueue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .debug.Event events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .debug.Range range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventsQueue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:debug.EventsQueue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // repeated .debug.Event events = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .debug.Range range = 3;
  if (_internal_has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:debug.EventsQueue)
  return target;
}

size_t EventsQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:debug.EventsQueue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .debug.Event events = 2;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .debug.Range range = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  // int32 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventsQueue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EventsQueue*>(
      &from));
}

void EventsQueue::MergeFrom(const EventsQueue& from) {
  EventsQueue* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:debug.EventsQueue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (from._internal_has_range()) {
    _this->_internal_mutable_range()->::debug::Range::MergeFrom(
        from._internal_range());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EventsQueue::CopyFrom(const EventsQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:debug.EventsQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsQueue::IsInitialized() const {
  return true;
}

void EventsQueue::InternalSwap(EventsQueue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventsQueue, _impl_.count_)
      + sizeof(EventsQueue::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(EventsQueue, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

std::string EventsQueue::GetTypeName() const {
  return "debug.EventsQueue";
}


// ===================================================================

class Event::_Internal {
 public:
};

Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:debug.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Event* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic().empty()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:debug.Event)
}

inline void Event::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:debug.Event)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_.Destroy();
  _impl_.payload_.Destroy();
}

void Event::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:debug.Event)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topic_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* Event::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:debug.Event)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "debug.Event.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // string payload = 2;
  if (!this->_internal_payload().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "debug.Event.payload");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:debug.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:debug.Event)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // string payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Event*>(
      &from));
}

void Event::MergeFrom(const Event& from) {
  Event* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:debug.Event)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_topic().empty()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:debug.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

std::string Event::GetTypeName() const {
  return "debug.Event";
}


// ===================================================================

class Range::_Internal {
 public:
};

Range::Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:debug.Range)
}
Range::Range(const Range& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Range* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){}
    , decltype(_impl_.end_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.end_));
  // @@protoc_insertion_point(copy_constructor:debug.Range)
}

inline void Range::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){0}
    , decltype(_impl_.end_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:debug.Range)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Range::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Range::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:debug.Range)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_) -
      reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.end_));
  _internal_metadata_.Clear<std::string>();
}

const char* Range::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Range::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:debug.Range)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 end = 2;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:debug.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:debug.Range)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 end = 2;
  if (this->_internal_end() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Range::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Range*>(
      &from));
}

void Range::MergeFrom(const Range& from) {
  Range* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:debug.Range)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _this->_internal_set_end(from._internal_end());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:debug.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::InternalSwap(Range* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Range, _impl_.end_)
      + sizeof(Range::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(Range, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

std::string Range::GetTypeName() const {
  return "debug.Range";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace debug
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::debug::DebugMessage*
Arena::CreateMaybeMessage< ::debug::DebugMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::debug::DebugMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::debug::Notification*
Arena::CreateMaybeMessage< ::debug::Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::debug::Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::debug::Payload*
Arena::CreateMaybeMessage< ::debug::Payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::debug::Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::debug::Snapshot*
Arena::CreateMaybeMessage< ::debug::Snapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::debug::Snapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::debug::Function*
Arena::CreateMaybeMessage< ::debug::Function >(Arena* arena) {
  return Arena::CreateMessageInternal< ::debug::Function >(arena);
}
template<> PROTOBUF_NOINLINE ::debug::RFC*
Arena::CreateMaybeMessage< ::debug::RFC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::debug::RFC >(arena);
}
template<> PROTOBUF_NOINLINE ::debug::CallstackEntry*
Arena::CreateMaybeMessage< ::debug::CallstackEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::debug::CallstackEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::debug::Locals*
Arena::CreateMaybeMessage< ::debug::Locals >(Arena* arena) {
  return Arena::CreateMessageInternal< ::debug::Locals >(arena);
}
template<> PROTOBUF_NOINLINE ::debug::Value*
Arena::CreateMaybeMessage< ::debug::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::debug::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::debug::CallbackMapping*
Arena::CreateMaybeMessage< ::debug::CallbackMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::debug::CallbackMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::debug::CallbackEntry*
Arena::CreateMaybeMessage< ::debug::CallbackEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::debug::CallbackEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::debug::EventsQueue*
Arena::CreateMaybeMessage< ::debug::EventsQueue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::debug::EventsQueue >(arena);
}
template<> PROTOBUF_NOINLINE ::debug::Event*
Arena::CreateMaybeMessage< ::debug::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::debug::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::debug::Range*
Arena::CreateMaybeMessage< ::debug::Range >(Arena* arena) {
  return Arena::CreateMessageInternal< ::debug::Range >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
