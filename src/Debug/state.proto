syntax = "proto3";

package communication;

message DebugMessage {
  enum Command {
    // standard debug operations
    run = 0;
    halt = 1;
    pause = 2;
    step = 3;
    bpadd = 4;
    bprem = 5;
    // inspection operations
    dump = 6;
    dumplocals = 7;
    dumpfull = 8;
    dumpevents = 9;
    dumpcallbacks = 10;
    // update operations
    updatefunc = 11;
    updatelocal = 12;
  }
  Command command = 1;

  // optional payloads
  optional State state = 2;
  optional Locals locals = 3;
  optional Function function = 4;
  optional EventsQueue events = 5;
  optional Range range = 6;
  optional CallbackMapping callbacks = 7;
  optional CallbackEntry callback = 8;
}

message State {
  uint32 program_counter = 1;
  enum RunningState {
    WARDUINOrun = 0;
    WARDUINOpause = 1;
    WARDUINOstep = 2;
    PROXYrun = 3;
    PROXYhalt = 4;
  }
  RunningState state = 2;
  repeated bytes breakpoints = 3;
  repeated Function functions = 4;
  repeated CallstackEntry callstack = 5;
  optional Locals locals = 6;
  optional EventsQueue queue = 7;
  optional CallbackMapping callbacks = 8;
}

message Function {
  int32 fidx = 1;
  int32 from = 2;
  int32 to = 3;
  optional bytes instructions = 4;  // implementation
}

message CallstackEntry {
  int32 type = 1;
  int32 fidx = 2;
  int32 sp = 3;
  int32 fp = 4;
  int32 start = 5;
  int32 ra = 6;
}

message Locals {
  int32 count = 1;
  repeated Value values = 2;
}

message Value {
  enum Type {
    i32 = 0;
    i64 = 1;
    f32 = 2;
    f64 = 3;
    any = 4;
  }
  Type type = 1;
  string value = 2;  // can be any wasm value
  int32 index = 3;
}

message CallbackMapping {
  repeated CallbackEntry mapping = 1;
}

message CallbackEntry {
  string topic = 1;
  repeated int32 tidx = 2;
}

message EventsQueue {
  int32 count = 1;  // total count of events in queue
  repeated Event events = 2;  // slice of events
  optional Range range = 3;  // range of returned slice
}

message Event {
  string topic = 1;
  string payload = 2;
}

message Range {
  int32 start = 1;  // start index
  int32 end = 2;  // end index
}
